Overview
When your computer runs your code, it has to keep track of all of the variables in your code. Your computer stores all of these variables in something called random access memory (RAM).

Follow Along
Sometimes RAM is referred to as "working memory" or just "memory."

There is a distinction between "memory" and "storage". "Persistent storage" or "disc storage" holds all files like videos, text documents, and applications. RAM is faster than storage but has less space. Storage is slower but has more space.

Think of RAM like a tall bookcase with a lot of shelves. Think of a typical furniture bookcase and imagine how many "shelves" or "spaces" or "locations" there are. For most modern bookcases, there are about 20. But for computers, they have between billions and trillions of "shelves."

Those things you put on the shelves are called variables. And one variable, a string variable, might have something like this for an address: 3FL8S7pxx12g. Each shelf's number is called its address.

Each one of the "shelves" (memory addresses) in our "bookshelf" (RAM) holds 8 bits. You can think of each bit like a tiny switch that can either be "on" or "off." "On" is represented by a 1, and "off" is represented by a 0. A collection of 8 bits is called a byte, so we can say that each slot in RAM holds either 8 bits or 1 byte.

The processor does all the work of the computer. In between the processor and the RAM is something called a memory controller. The memory controller has a direct connection to each slot or "shelf" in RAM. Through that connection, it can read and write to RAM.

The memory controller is connected directly to all the shelves of RAM. This direct connection is crucial because we can access the bits at memory address 0 then read the bits at address 918,873 without having to climb down the many levels in the bookshelf to read this other data. Since we can read data located at any memory address we want without having to climb down the bookshelf, we call such memory Random Access Memory.

A spinning hard drive (think of a record spinning on an old record player) does not directly connect to the very tiny bits of data stored on it. Instead, there's a small mechanical thing called a "head" that physically moves along the disc's surface to do the reading and writing. Since there's no direct connection to the data, reading and writing on discs takes longer (the head's mechanical movement takes time).

Computers are mainly concerned with speed, so they are optimized to get a boost when the processor can access nearby memory addresses in RAM. The processor has temporary storage where it keeps a copy of stuff we recently obtained from RAM (called a cache).

We can think of that block of memory addresses that the processor has decided to keep around as one large cache. It can get read from the processor faster than RAM.

Whenever the processor reads something (say, the player's position in an old adventure game) out of RAM, it adds it to the cache to be able to use it again in the future. Then, when it needs something else from RAM, it will go to the cache for it. As you can see, the cache helps the processor by saving execution cycles required to go out and read something from RAM.

The processor, not RAM, has the actual cache. The memory controller keeps track of what goes into and comes out of the cache.

We can think of it in several ways. Perhaps, the processor can use the cache as a temporary area to keep a copy of its last actions just in case it needs to reread them.

There is one caveat â€” it is not as if "everything" goes out to RAM and then gets inserted into the cache. In reality, the cache holds only a handful of memory addresses from RAM. Also, note that these few memory addresses in the cache can be accessed faster than other storage locations.

RAM is essentially an array. Each element in an arry has an index.
Let's imagine that your internet browser software is using the first five slots in memory. We would have to start our array below that at memory address 6. So, index 0 in our array would be at memory address 6. Index 1 would be at memory address 7, and so on.

n = 5 --> 1001 in RAM
arr = [10, 20, 30] --> 10 = 1004, 20 = 1005, 30 = 1006
1. Each element in the array takes up the same number of slots.
2. All of the elements are right next to each other (contiguous)
Indexing the array in constant time. --> arr[2]
so starting at 5 and 2 after the array = 1004.
It's just 2* how ever many slots each element takes up after the start of the array(1004)
arr.pop() -  Runtime of removing from the end of the array: O(1) - Constant
arr.pop(20) - Runtime of removing from the middle of the array: O(n) - linear

Strings are stored in memory as binary, an array of characters. rapidtables.com/code/text/ascii-table.html
